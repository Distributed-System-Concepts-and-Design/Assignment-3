# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import mapReduce_pb2 as mapReduce__pb2


class MapReduceServiceStub(object):
    """Combined service for all interactions
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessMap = channel.unary_unary(
                '/mapreduce.MapReduceService/ProcessMap',
                request_serializer=mapReduce__pb2.MapRequest.SerializeToString,
                response_deserializer=mapReduce__pb2.MapResponse.FromString,
                )
        self.ProcessReduce = channel.unary_unary(
                '/mapreduce.MapReduceService/ProcessReduce',
                request_serializer=mapReduce__pb2.ReduceRequest.SerializeToString,
                response_deserializer=mapReduce__pb2.ReduceResponse.FromString,
                )
        self.RetrieveMapPairs = channel.unary_unary(
                '/mapreduce.MapReduceService/RetrieveMapPairs',
                request_serializer=mapReduce__pb2.MapPairsRequest.SerializeToString,
                response_deserializer=mapReduce__pb2.MapPairsResponse.FromString,
                )


class MapReduceServiceServicer(object):
    """Combined service for all interactions
    """

    def ProcessMap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessReduce(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveMapPairs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MapReduceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessMap': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessMap,
                    request_deserializer=mapReduce__pb2.MapRequest.FromString,
                    response_serializer=mapReduce__pb2.MapResponse.SerializeToString,
            ),
            'ProcessReduce': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessReduce,
                    request_deserializer=mapReduce__pb2.ReduceRequest.FromString,
                    response_serializer=mapReduce__pb2.ReduceResponse.SerializeToString,
            ),
            'RetrieveMapPairs': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrieveMapPairs,
                    request_deserializer=mapReduce__pb2.MapPairsRequest.FromString,
                    response_serializer=mapReduce__pb2.MapPairsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mapreduce.MapReduceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MapReduceService(object):
    """Combined service for all interactions
    """

    @staticmethod
    def ProcessMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mapreduce.MapReduceService/ProcessMap',
            mapReduce__pb2.MapRequest.SerializeToString,
            mapReduce__pb2.MapResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProcessReduce(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mapreduce.MapReduceService/ProcessReduce',
            mapReduce__pb2.ReduceRequest.SerializeToString,
            mapReduce__pb2.ReduceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RetrieveMapPairs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mapreduce.MapReduceService/RetrieveMapPairs',
            mapReduce__pb2.MapPairsRequest.SerializeToString,
            mapReduce__pb2.MapPairsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
